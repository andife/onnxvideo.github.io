<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>https://andife.github.io/</title><link>https://andife.github.io/onnxvideo.github.io/</link><description></description><atom:link href="https://andife.github.io/onnxvideo.github.io/feeds/speaker_brandon-rhodes.rss.xml" rel="self"></atom:link><lastBuildDate>Wed, 20 Nov 2019 00:00:00 +0000</lastBuildDate><item><title>When Python Practices Go Wrong</title><link>https://andife.github.io/onnxvideo.github.io/codedive-2019/when-python-practices-go-wrong.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Just because a programming pattern or convention becomes popular doesn’t always mean it’s a good idea! Let’s dig into the consensus the Python community has built around what constitutes “Pythonic” code and look at the cases where the conventional wisdom is wrong. In the process, we’ll learn how code in a dynamic language can become more readable and more effective.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Brandon Rhodes</dc:creator><pubDate>Wed, 20 Nov 2019 00:00:00 +0000</pubDate><guid>tag:andife.github.io,2019-11-20:onnxvideo.github.io/codedive-2019/when-python-practices-go-wrong.html</guid></item></channel></rss>